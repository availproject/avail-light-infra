receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

  prometheus:
    config:
      scrape_configs:
      - job_name: 'otel'
        scrape_interval: 10s
        static_configs:
        - targets: ['0.0.0.0:8888']

#TODO:Fix broad filters.
processors:
  filter/customers:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - ".*"
          - "{{ customer }}/.*"
          - "{{ customer }}_.*"
      exclude:
        match_type: regexp
        metric_names:
          - ".*avail.*"

  # https://github.com/open-telemetry/opentelemetry-collector/blob/v0.83.0/processor/batchprocessor/README.md
  batch:
    send_batch_max_size: 1000
    send_batch_size: 500 # number of metrics received before send
    timeout: 120s #if 0 ignores batch_size and sends immediately

extensions:
  health_check:

exporters:
  prometheusremotewrite:
    endpoint: https://prometheus.fra.avail.so/api/v1/write
    external_labels:
      basedn: "{{ customer }}.lightclient"
  prometheus:
#TODO: Check prom server endpoint with Lakshay
    endpoint: "0.0.0.0:8889"
    const_labels:
      basedn: "{{ customer }}.lightclient"
    metric_expiration: 5m
    resource_to_telemetry_conversion:
      enabled: true

  logging:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

service:
  extensions: [health_check]
  pipelines:
    metrics:
      receivers: [prometheus, otlp]
      processors: [filter/customers]
      exporters: [prometheus, prometheusremotewrite, logging]
